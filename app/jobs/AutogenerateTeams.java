package jobs;

import com.google.common.base.Function;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.Multimaps;
import models.*;
import notifiers.Mails;
import play.Logger;
import play.jobs.Job;
import play.jobs.On;

import java.util.*;

import static ch.lambdaj.Lambda.extract;
import static ch.lambdaj.Lambda.on;

/** Generates new teams for free users and sends email notification **/
@On("0 0 8 ? * SAT") // fires every Saturday at 08:00 UTC
public class AutogenerateTeams extends Job {

    private static final int TEAM_MEMBERS_COUNT = 7;

    private static Function<User, Country> pickCountryFn = new Function<User, Country>() {
        @Override
        public Country apply(User user) {
            return user.country;
        }
    };

	public void doJob() {
        Logger.debug("------------ JOB:TEAM-GEN: auto teams generation ------------");

        // 1. select all FREE users
        // 2. map users to their countries
        //    then FOR EACH COUNTRY
        //      3. generate ( Math.ceil(n / 7) ) empty teams with auto name ('Autogenerated team ID')
        //          then FOR EACH TEAM
        //              4. fill them with randomly picked up users (and remove users from map) until map is empty
        //              5. make the first user team admin
        //              6. save team
        //              7. set team name ('Autogenerated team ID')
        //                  and then FOR EACH USER
        //                      --. add new team to user
        //                      --. save user
        //                      7. send user a mail notification (alter for admin, alter for incomplete team)


        // 1. select all FREE users
		List<User> freeUsers = User.find("select u from User u where u.takePartInAutoTeams = 1 AND u.command IS NULL AND u.country IS NOT NULL AND u.role = ? order by RAND()", User.ROLE_USER).fetch();

        if(freeUsers.size() > 0){
            Logger.debug("JOB:TEAM-GEN: found %d free users for auto teams", freeUsers.size());

            // 2. map users to their countries
            ImmutableListMultimap<Country, User> countyUsersMap = Multimaps.index(freeUsers, pickCountryFn);

            // then FOR EACH COUNTRY
            for (Map.Entry<Country, Collection<User>> countryUsersEntry : countyUsersMap.asMap().entrySet()) {
                Country country = countryUsersEntry.getKey();
                List<User> countryUsers = new ArrayList<User>(countryUsersEntry.getValue());
                //Locale countryLang = country.name.equals("Belarus") || country.name.equals("Russia") ? new Locale("ru") : new Locale("en");

                // 3. generate N new empty teams
                int newTeamsCount = Double.valueOf( Math.ceil( countryUsers.size() / (float) TEAM_MEMBERS_COUNT) ).intValue();
                Logger.debug("JOB:TEAM-GEN: country [%s]: toss %d users to %d teams", country.name, countryUsers.size(), newTeamsCount);

                // then FOR EACH NEW TEAM
                for (int i = 0; i < newTeamsCount; i++) {
                    final String teamName = String.format("NewTeam %d", Command.count() + 1); //TODO i18n team name

                    // 4. pick up users for new team
                    final int startPos = (i % TEAM_MEMBERS_COUNT) * TEAM_MEMBERS_COUNT;
                    final int endPos = Math.min(startPos + TEAM_MEMBERS_COUNT, countryUsers.size());
                    List<User> newTeamUsers = countryUsers.subList(startPos, endPos);

                    // 4. fill team with picked up users
                    // 5. make the first user team admin
                    // 6. save team
                    Command newTeam = createNewTeam(country, teamName, newTeamUsers);

                    final List<Long> userIds = extract(newTeamUsers, on(User.class).id);
                    Logger.debug("JOB:\tnew team for [%s]: '%s', %d members (%s), admin is %d",
                            newTeam.country.name,
                            newTeam.name,
                            newTeam.users.size(),
                            Arrays.toString(userIds.toArray()),
                            newTeam.founderUser.id);

                    // 7. send user a mail notification (+ extra one for incomplete team)
                    boolean isIncompleteTeam = newTeam.users.size() < TEAM_MEMBERS_COUNT;
                    for (User user : newTeamUsers) {
                        Mails.newTeamGenerated(user);
                        if(isIncompleteTeam){
                            Mails.addMoreMembersToTeam(user);
                        }
                    }
                }
            }

            countyUsersMap = null; // for GC
        } else {
            Logger.debug("JOB:TEAM-GEN: no free users, all are active in their teams :)");
        }

        Logger.debug("---------------------------------------------");
	}

    private static Command createNewTeam(Country country, String name, List<User> members) {
        Command team = new Command();
        team.country = country;
        team.city = "";
        team.description = "";
        team.country = country;
        team.name = name;
        team.isVacancy = members.size() < TEAM_MEMBERS_COUNT;

        team.phase = ProjectPhase.findById(1L);
        team.sphere = BSphere.findById(1L);
        team.type = BType.findById(1L);

        team.communication = new Communication();
        team.finance = new Finance();
        team.idealize = new Idealize();
        team.legal = new Legal();
        team.management = new Management();
        team.marketing = new Marketing();
        team.otherSkill= new OtherSkill();
        team.pragmatica = new Pragmatica();
        team.programming = new IT();
        team.trade = new Trade();

        team.global = false;
        team.regDate = new Date();

        team.users = members;
        final User teamAdmin = team.users.get(0);
        team.founderUser = teamAdmin;
        team.save();

        teamAdmin.role = User.ROLE_GROUP_ADMIN;
        teamAdmin.save();
        for (User member : members) {
            member.commandToInvite = null;
            member.command = team;
            member.save();
        }

        //	create main topic
        Topic mainTopicPrivate = new Topic(true, false, team.id);
        mainTopicPrivate.save();

        // create public main topic
        Topic mainTopicPublic = new Topic(true, true, team.id);
        mainTopicPublic.save();

        team.topics = Arrays.asList(mainTopicPublic, mainTopicPrivate);
        team.save();

        return team;
    }

}
